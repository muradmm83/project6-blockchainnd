pragma solidity ^0.4.24;

import "../coffeeaccesscontrol/CustomerRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeeaccesscontrol/ManufacturerRole.sol";
import "../coffeecore/Ownable.sol";

// Define a contract 'Supplychain'
contract SupplyChain is Ownable, ManufacturerRole, RetailerRole, CustomerRole {

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Manufactured,  // 0
    Assembled,  // 1
    Packed,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
    }

  State constant defaultState = State.Manufactured;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originManufacturerID; // Metamask-Ethereum address of the Manufacturer
    string  originManufacturerName; // Manufacturer Name
    string  originManufacturerInformation;  // Factory Information
    string  originManufacturerLatitude; // Factory Latitude
    string  originManufacturerLongitude;  // Factory Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address retailerID; // Metamask-Ethereum address of the Retailer
    address customerID; // Metamask-Ethereum address of the Customer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Manufactured(uint upc);
  event Assembled(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price, "Insuffecient amount"); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].retailerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Manufactured
  modifier manufactured(uint _upc) {
    require(items[_upc].itemState == State.Manufactured);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Assembled
  modifier assembled(uint _upc) {
    require(items[_upc].itemState == State.Assembled);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale, "Item is not for sale");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased);
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner()) {
      selfdestruct(owner());
    }
  }

  // Define a function 'manufactureItem' that allows a manufacturer to mark an item 'Manufactured'
  function manufactureItem(uint _upc, address _originManufacturerID, string _originManufacturerName, string _originManufacturerInformation, string  _originManufacturerLatitude, string  _originManufacturerLongitude, string  _productNotes) public onlyManufacturer
  {
    // Add the new item as part of Manufactured
    
    items[_upc] = Item({
        sku: sku, 
        upc: _upc, 
        ownerID: owner(),
        originManufacturerID: _originManufacturerID,
        originManufacturerName: _originManufacturerName,
        originManufacturerInformation: _originManufacturerInformation,
        originManufacturerLatitude: _originManufacturerLatitude,
        originManufacturerLongitude: _originManufacturerLongitude,
        productID: sku + _upc,
        productPrice: 0,
        productNotes: _productNotes,
        itemState: defaultState,
        retailerID: address(0),
        customerID: address(0)
    });
    
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Manufactured(_upc);
  }

  // Define a function 'assembleItem' that allows a farmer to mark an item 'Assembled'
  function assembleItem(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
    manufactured(_upc)
  // Call modifier to verify caller of this function
    onlyManufacturer
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Assembled;
    
    // Emit the appropriate event
    emit Assembled(_upc);
  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function packItem(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
    assembled(_upc)
  // Call modifier to verify caller of this function
    onlyManufacturer
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Packed;
    // Emit the appropriate event
    emit Packed(_upc);
  }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price) public 
  // Call modifier to check if upc has passed previous supply chain stage
    packed(_upc)
  // Call modifier to verify caller of this function
    onlyManufacturer
  {
    // Update the appropriate fields
    items[_upc].itemState = State.ForSale;
    items[_upc].productPrice = _price;
    // Emit the appropriate event
    emit ForSale(_upc);
  }

  // Define a function 'buyItem' that allows the retailer to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    forSale(_upc)
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_upc].productPrice)
    // Call modifer to send any excess ether back to buyer
    checkValue(_upc) 
    // only retailer
    onlyRetailer
    {
    
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].retailerID = msg.sender;
    items[_upc].itemState = State.Sold;
    // Transfer money to manufacturer
    items[_upc].originManufacturerID.transfer(items[_upc].productPrice);
    // emit the appropriate event
    emit Sold(_upc);
  }

  // Define a function 'shipItem' that allows the manufacturer to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    sold(_upc)
    // Call modifier to verify caller of this function
    onlyManufacturer
    {
    // Update the appropriate fields
    items[_upc].itemState = State.Shipped;
    // Emit the appropriate event
    emit Shipped(_upc);
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    shipped(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyRetailer
    {
    // Update the appropriate fields - itemState
    items[_upc].itemState = State.Received;
    // Emit the appropriate event
    emit Received(_upc);
  }

  // Define a function 'purchaseItem' that allows the customer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    received(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyCustomer
    {
    // Update the appropriate fields - ownerID, customerID, itemState
        items[_upc].ownerID = msg.sender;
        items[_upc].customerID = msg.sender;
        items[_upc].itemState = State.Purchased;
    // Emit the appropriate event
        emit Purchased(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originManufacturerID,
  string  originManufacturerName,
  string  originManufacturerInformation,
  string  originManufacturerLatitude,
  string  originManufacturerLongitude
  ) 
  {
  // Assign values to the 8 parameters
  itemSKU = items[_upc].sku;
  itemUPC = items[_upc].upc;
  ownerID = items[_upc].ownerID;
  originManufacturerID = items[_upc].originManufacturerID;
  originManufacturerName = items[_upc].originManufacturerName;
  originManufacturerInformation = items[_upc].originManufacturerInformation;
  originManufacturerLatitude = items[_upc].originManufacturerLatitude;
  originManufacturerLongitude = items[_upc].originManufacturerLongitude;
  
  return 
  (
  itemSKU,
  itemUPC,
  ownerID,
  originManufacturerID,
  originManufacturerName,
  originManufacturerInformation,
  originManufacturerLatitude,
  originManufacturerLongitude
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  productNotes,
  uint    productPrice,
  State    itemState,
  address retailerID,
  address customerID
  ) 
  {
    // Assign values to the 8 parameters
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    productID = items[_upc].productID;
    productNotes = items[_upc].productNotes;
    productPrice = items[_upc].productPrice;
    itemState = items[_upc].itemState;
    retailerID = items[_upc].retailerID;
    customerID = items[_upc].customerID;

  
    
  return 
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  retailerID,
  customerID
  );
  }
}
